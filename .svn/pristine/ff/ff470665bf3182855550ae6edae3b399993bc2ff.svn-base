package com.cadre.service.sys;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cadre.common.WebApplication;
import com.cadre.controller.pojo.UserShowView;
import com.cadre.dao.BaseDao;
import com.cadre.model.excel.DataErrorMsg;
import com.cadre.model.page.Page;
import com.cadre.model.utils.StringUtil;
import com.cadre.pojo.AdministrationLevelHistory;
import com.cadre.pojo.AdministrationWorkHistory;
import com.cadre.pojo.DictionaryDb;
import com.cadre.pojo.RoleResource;
import com.cadre.pojo.SysRole;
import com.cadre.pojo.User;
import com.cadre.pojo.UserRole;
import com.cadre.service.infoManager.AdministrationWorkService;
import com.cadre.service.infoManager.AdminstrationLevelService;
/**
 * 事物在service层控制，每个service类中的一个方法表示同一个事物。方法命名规范参考：applicationContext.xml中的配置。
 * @author qjp
 *
 */
@Service
public class UserService {
	private Logger logger = LogManager.getLogger(UserService.class);
	@Autowired
	BaseDao<User> UserDao;
	@Autowired
	BaseDao<SysRole> sysRoleDao;
	@Autowired
	BaseDao<UserRole> userRoleDao;
	@Autowired
	BaseDao<RoleResource> roleResourceDao;
	@Autowired
	AdminstrationLevelService adminstrationLevelService;
	@Autowired
	AdministrationWorkService administrationWorkService;
	@Autowired
	BaseDao<DictionaryDb> dictionaryDao;
	
	/**
	 * 查找所有用户
	 * @return
	 */
	public List<User> queryAll(){
		String hql = "from User where delFlag is null or delFlag = 1";
		return UserDao.queryList(hql,null);
	}
	
	/**
	 * 根据属性进行统计
	 * @param propName
	 * @param value
	 * @return
	 */
	public int queryCount(String propName, Object value){
		String sql = "select count(*) from User as model where model."+propName+"= ?";
		return UserDao.findforCount(sql,new Object[]{value});
	}
	/**
	 * 根据id和属性进行统计
	 * @param propName
	 * @param value
	 * @param id
	 * @return
	 */
	public int queryCountByIdAndProp(String propName, Object value,Integer id){
		String sql = "select count(*) from User as model where model."+propName+"= ? and model.id<>?";
		return UserDao.findforCount(sql,new Object[]{value,id});
	}
	/**
	 * 分页查询用户数据
	 * @param queryStr
	 * @param queryDept
	 * @param currPage
	 * @param pageSize
	 * @return
	 * @throws Exception 
	 */
	public Page<UserShowView> findUserByPage(String queryStr,int currPage,int pageSize) throws Exception{
		if (StringUtil.isNotBlank(queryStr))
			queryStr = queryStr.replace(" ", "");
		String sql = "from User as ur   ";//查询对象
		String where = " (ur.delFlag is null or ur.delFlag=1) and ur.name<>'admin' ";//查询条件
		Object[] args = null;
		if(StringUtils.isNotBlank(queryStr)){
			where += " and ur.userName like '%"+queryStr+"%' or replace(ur.name,' ','') like '%"+queryStr+"%' or ur.number like '%"+queryStr+"%' or ur.identifyNum like '%"+queryStr+"%' ) ";
		}
		sql = sql + " where "+where;
		Page<UserShowView> page = new Page<UserShowView>();
		List<User> UserResult = UserDao.findForPage(sql+" order by ur.id desc",args, currPage, pageSize);
		int totalSize = UserDao.findforCount("select count(*) "+sql,args);
		List<UserShowView> result = new ArrayList<UserShowView>();
		UserShowView usv = null;
		AdministrationLevelHistory alh = null;
		AdministrationWorkHistory awh = null;
		for (User us : UserResult){
			usv = new UserShowView();
			usv.setUser(us);
			alh = adminstrationLevelService.findLastByUser(us);
			if (alh != null)
				usv.setAdministrationLevel(alh.getLevelName());
			awh = administrationWorkService.findLastByUser(us);
			if (awh != null){
				usv.setAdministrationWorkName(awh.getJobName());
				usv.setAdministrationWorkUnits(awh.getUnits());
			}
			result.add(usv);
		}
		usv = null;
		page.setResult(result);
		page.setCurrPage(currPage);
		page.setPageSize(pageSize);
		page.setTotalSize(totalSize);
		return page;	
	}
	/**
	 * 根据hql分页查找
	 * @param hql
	 * @param currPage
	 * @param pageSize
	 * @return
	 * @throws Exception
	 */
	public Page<UserShowView> findSearchUserByPage(String name,String sex,String idNumber,Date birthday,String birthdayOperator,
			String age,String ageOperator,String positionName,String positionNameOperator,int currPage,int pageSize) throws Exception{
		String hql="from User where name<>'admin' and (delFlag is null or delFlag = 1)";
		if (StringUtil.isNotBlank(name)){
			 name = name.replace(" ", "");
			 hql+= " and replace(name,' ','') like '%"+name+"%'";
		}
		if (StringUtil.isNotBlank(sex)){
			String sexString = sex.equals("1")?"男":"女";
			hql+= " and gender ='"+sexString+"'";
		}
		if (StringUtil.isNotBlank(idNumber)){
			hql+=" and identifyNum ='"+idNumber+"'";
		}
		if (birthday!=null){
			
			hql += " and (birthDay "+this.convertOperator(birthdayOperator)+" '"+DateFormat.getDateInstance().format(birthday)+"' or birthDay is null)";
		}
		if (StringUtil.isNotBlank(age)){
			int ageInt = Integer.valueOf(age);
			hql+=" and YEAR(NOW())-YEAR(birthday)+1"+this.convertOperator(ageOperator)+age.toString();
		}
		
		hql += " order by id desc";
		Page<UserShowView> page = new Page<UserShowView>();
		Object[] args=null;
		List<User> UserResult =  UserDao.findForPage(hql, args, currPage, pageSize);
		List<User> users = UserDao.queryList(hql, args);
		int totalSize = UserDao.findforCount("select count(*) "+hql, args);
		
		List<UserShowView> result = new ArrayList<UserShowView>();
		Map<Integer, AdministrationLevelHistory> alhMap  = new HashMap<Integer, AdministrationLevelHistory>();
		Map<Integer, AdministrationWorkHistory> awhMap  = new HashMap<Integer, AdministrationWorkHistory>();
		List<AdministrationLevelHistory> alhList = adminstrationLevelService.findAll();
		List<AdministrationWorkHistory> awhList = administrationWorkService.findAll();
		if (null != alhList){
			for (AdministrationLevelHistory alh : alhList){
				if (alhMap.containsKey(alh.getUser().getId())){
					if (alh.getLevelDay().after(alhMap.get(alh.getUser().getId()).getLevelDay())){//时间靠后的取出
						alhMap.put(alh.getUser().getId(), alh);
					}
				}else{
					alhMap.put(alh.getUser().getId(), alh);
				}			
			}
		}
		if (null != awhList){
			for (AdministrationWorkHistory awh : awhList){
				if (awhMap.containsKey(awh.getUser().getId())){
					if (awh.getEndDay().after(awhMap.get(awh.getUser().getId()).getEndDay())){//时间靠后的取出
						awhMap.put(awh.getUser().getId(), awh);
					}
				}else{
					awhMap.put(awh.getUser().getId(), awh);
				}
			}
		}
	
		UserShowView usv = null;
		Integer count = 0;
		for (User us : users){
			totalSize = totalSize - 1;
			usv = new UserShowView();
			usv.setUser(us);
			if (alhMap.get(us.getId()) != null)
				usv.setAdministrationLevel(alhMap.get(us.getId()).getLevelName());
			if (awhMap.get(us.getId()) != null){
				usv.setAdministrationWorkName(awhMap.get(us.getId()).getJobName());
				usv.setAdministrationWorkUnits(awhMap.get(us.getId()).getUnits());	
			}
			if (StringUtil.isNotBlank(positionName)) {
				if (positionNameOperator.equals("E")) {
					if (null == usv.getAdministrationLevel()) continue;
					if (positionName.equals(usv.getAdministrationLevel())) {
						if (count <= currPage*pageSize-1 && (currPage-1)*pageSize <= count) {
							result.add(usv);
							if (result.size() == 10) break;
						}
							
						totalSize = totalSize + 1;
						count = count + 1; 
					}
				} else if (positionNameOperator.equals("L")) {
					
					if (this.comparePositionLevel(positionName,usv.getAdministrationLevel())) {
						if (count <= currPage*pageSize-1 && (currPage-1)*pageSize <= count) {
							result.add(usv);
							if (result.size() == 10) break;
						}
						totalSize = totalSize + 1;
						count = count + 1; 
					}
				} else {
					if (null == usv.getAdministrationLevel()) continue;
					if (this.comparePositionLevel(usv.getAdministrationLevel(),positionName)) {
						if (count <= currPage*pageSize-1 && (currPage-1)*pageSize <= count) {
							result.add(usv);
							if (result.size() == 10) break;
						}
						totalSize = totalSize + 1;
						count = count + 1; 
					}
				}
			} else {
				if (count <= currPage*pageSize-1 && (currPage-1)*pageSize <= count) {
					result.add(usv);
					if (result.size() == 10) break;
				}
				totalSize = totalSize + 1;
				count = count + 1; 
			}
		}
		
		
		
		
		
		page.setResult(result);
		page.setPageSize(pageSize);
		page.setCurrPage(currPage);
		page.setTotalSize(totalSize);
		return page;
	}
	/**
	 * 根据id查找用户
	 * @param id
	 * @return
	 */
	public User findById(Integer id){
		return UserDao.findOne(User.class,id);
	}
	
	/**
	 * 根据用户名查找用户
	 * @param username
	 * @return
	 */
	public User findByUsername(String username){
		String sql = "from User where name=? ";
		List<User> result = UserDao.queryList(sql,new Object[]{username});
		if(result.size() == 0){
			return null;				
		}else{
			return result.get(0); 
		}
	}
	/**
	 * 添加用户操作
	 * @param user
	 * @param roleIds
	 */
	public void addUser(User user,String roleIds){
		
		UserDao.save(user);//添加用户
		if(StringUtils.isNotBlank(roleIds)){//给用户添加角色
			String[] split = roleIds.split(",");
			for(String str : split) {
				if(StringUtils.isNotBlank(str)){
					Integer roleId = Integer.parseInt(str);
					SysRole sysRole = sysRoleDao.findOne(SysRole.class, roleId);
					UserRole userRole = new UserRole();
					userRole.setUser(user);
					userRole.setSysRole(sysRole);
					userRoleDao.save(userRole);//往用户角色表中添加角色						
				}
			}
		}
	}
	/**
	 * 更新用户信息
	 * @param user
	 */
	public boolean updateUser(User user){
		if(user.getId() == null){
			return false;
		}
		UserDao.update(user);
		return true;
	}
	/**
	 * 更新用户角色信息
	 * @param userId
	 * @param roleIds
	 */
	public void updateUserRole(User User,String roleIds){
		//修改用户
		UserDao.update(User);
		
		//删除所有旧角色
		userRoleDao.executeUpdateQuery(" delete UserRole where userId=?", new Object[]{User.getId()});
		//给用户添加角色
		if(StringUtils.isNotBlank(roleIds)){
			String[] split = roleIds.split(",");
			for(String str : split) {
				if(StringUtils.isNotBlank(str)){
					Integer roleId = Integer.parseInt(str);
					SysRole sysRole = sysRoleDao.findOne(SysRole.class, roleId);
					UserRole userRole = new UserRole();
					userRole.setUser(User);
					userRole.setSysRole(sysRole);
					//往用户角色表中添加角色
					userRoleDao.save(userRole);
				}
			}
		}
	}

	/**
	 * 删除新员工
	 * @param id
	 */
	public void deleteUser(Integer id){
		User User = UserDao.findOne(User.class, id);
		//删除用户
		User.setDelFlag(0);//置位为0， 删除
		UserDao.update(User);
		
		//删除用户相关角色
		userRoleDao.executeUpdateQuery(" delete UserRole where userId=?", new Object[]{id});
	}
	
	/**
	 * 批量插入用户
	 * @param UserList
	 * @return
	 */
	public boolean saveUsersBatch(List<User> UserList){
		for(User user : UserList){
			if(user.getId() != null){
				UserDao.update(user);
			}else{
				UserDao.save(user);
			}
		}
		return true;		
	}
	/**
	 * 根据员工号查找用户
	 * @param num
	 * @return
	 */
	
	public User findByNumber(String num){
		String hql="from User where number=?";
		List<User> userList = UserDao.queryList(hql, new Object[]{num});
		if (userList.size()==0){
			return null;
		}else{
			return userList.get(0);
		}
	}
	
	

	public List<UserShowView> findUserForExport(String queryStr) {
		// TODO Auto-generated method stub
		String sql = "from User ";//查询对象
		String where = " (delFlag is null or delFlag=1) and name<>'admin' ";//查询条件
		Object[] args = null;
		if(StringUtils.isNotBlank(queryStr)){
			where += " and (userName like '%"+queryStr+"%' or name like '%"+queryStr+"%' or number like '%"+queryStr+"%' ) ";
		}
		sql = sql + " where "+where;
		List<User> userResult = UserDao.queryList(sql, args);
		List<UserShowView> result = new ArrayList<UserShowView>();
		Map<Integer, AdministrationLevelHistory> alhMap  = new HashMap<Integer, AdministrationLevelHistory>();
		Map<Integer, AdministrationWorkHistory> awhMap  = new HashMap<Integer, AdministrationWorkHistory>();
		List<AdministrationLevelHistory> alhList = adminstrationLevelService.findAll();
		List<AdministrationWorkHistory> awhList = administrationWorkService.findAll();
		if (null != alhList){
			for (AdministrationLevelHistory alh : alhList){
				if (alhMap.containsKey(alh.getUser().getId())){
					if (alh.getLevelDay().after(alhMap.get(alh.getUser().getId()).getLevelDay())){//时间靠后的取出
						alhMap.put(alh.getUser().getId(), alh);
					}
				}else{
					alhMap.put(alh.getUser().getId(), alh);
				}			
			}
		}
		if (null != awhList){
			for (AdministrationWorkHistory awh : awhList){
				if (awhMap.containsKey(awh.getUser().getId())){
					if (awh.getEndDay().after(awhMap.get(awh.getUser().getId()).getEndDay())){//时间靠后的取出
						awhMap.put(awh.getUser().getId(), awh);
					}
				}else{
					awhMap.put(awh.getUser().getId(), awh);
				}
			}
		}
		
		UserShowView usv = null;

		for (User us : userResult){
			usv = new UserShowView();
			usv.setUser(us);
			if (alhMap.get(us.getId()) != null)
				usv.setAdministrationLevel(alhMap.get(us.getId()).getLevelName());
			if (awhMap.get(us.getId()) != null){
				usv.setAdministrationWorkName(awhMap.get(us.getId()).getJobName());
				usv.setAdministrationWorkUnits(awhMap.get(us.getId()).getUnits());	
			}
			result.add(usv);
		}
		usv = null;
		return result;	
	}
	/*
	 * 操作符转换
	 */
	private String convertOperator(String op){
		if (op.equals("R"))
			return ">";
		else if (op.equals("E"))
			return "=";
		else
			return "<";
	}

	public List<UserShowView> findSuperUserForExport(String name, String sex,
			String idNumber, Date birthday, String birthdayOperator,
			String ageOperator, String age,
			String positionName,String positionNameOperator) {
		// TODO Auto-generated method stub
		String hql="from User where name<>'admin' and (delFlag is null or delFlag = 1)";
		if (StringUtil.isNotBlank(name)){
			 hql+= " and name like '%"+name+"%'";
		}
		if (StringUtil.isNotBlank(sex)){
			String sexString = sex.equals("1")?"男":"女";
			hql+= " and gender ='"+sexString+"'";
		}
		if (StringUtil.isNotBlank(idNumber)){
			hql+=" and identifyNum ='"+idNumber+"'";
		}
		if (birthday!=null){
			
			hql += " and birthday "+this.convertOperator(birthdayOperator)+" '"+DateFormat.getDateInstance().format(birthday)+"'";
		}
		if (StringUtil.isNotBlank(age)){
			int ageInt = Integer.valueOf(age);
			hql+=" and YEAR(NOW())-YEAR(birthday)+1"+this.convertOperator(ageOperator)+age.toString();
		}
		List<User> userResult =  UserDao.queryList(hql, new Object[]{});
		List<UserShowView> result = new ArrayList<UserShowView>();
		List<User> users = UserDao.queryList(hql, new Object[]{});
		Map<Integer, AdministrationLevelHistory> alhMap  = new HashMap<Integer, AdministrationLevelHistory>();
		Map<Integer, AdministrationWorkHistory> awhMap  = new HashMap<Integer, AdministrationWorkHistory>();
		List<AdministrationLevelHistory> alhList = adminstrationLevelService.findAll();
		List<AdministrationWorkHistory> awhList = administrationWorkService.findAll();
		if (null != alhList){
			for (AdministrationLevelHistory alh : alhList){
				if (alhMap.containsKey(alh.getUser().getId())){
					if (alh.getLevelDay().after(alhMap.get(alh.getUser().getId()).getLevelDay())){//时间靠后的取出
						alhMap.put(alh.getUser().getId(), alh);
					}
				}else{
					alhMap.put(alh.getUser().getId(), alh);
				}			
			}
		}
		if (null != awhList){
			for (AdministrationWorkHistory awh : awhList){
				if (awhMap.containsKey(awh.getUser().getId())){
					if (awh.getEndDay().after(awhMap.get(awh.getUser().getId()).getEndDay())){//时间靠后的取出
						awhMap.put(awh.getUser().getId(), awh);
					}
				}else{
					awhMap.put(awh.getUser().getId(), awh);
				}
			}
		}
		
		UserShowView usv = null;

		for (User us : users){
			usv = new UserShowView();
			usv.setUser(us);
			if (alhMap.get(us.getId()) != null)
				usv.setAdministrationLevel(alhMap.get(us.getId()).getLevelName());
			if (awhMap.get(us.getId()) != null){
				usv.setAdministrationWorkName(awhMap.get(us.getId()).getJobName());
				usv.setAdministrationWorkUnits(awhMap.get(us.getId()).getUnits());	
			}
			if (StringUtil.isNotBlank(positionName)) {
				if (positionNameOperator.equals("E")) {
					if (null == usv.getAdministrationLevel()) continue;
					if (positionName.equals(usv.getAdministrationLevel())) {
						
							result.add(usv);
							
							
						
					}
				} else if (positionNameOperator.equals("L")) {
					
					if (this.comparePositionLevel(positionName,usv.getAdministrationLevel())) {
						
							result.add(usv);
							
					}
				} else {
					if (null == usv.getAdministrationLevel()) continue;
					if (this.comparePositionLevel(usv.getAdministrationLevel(),positionName)) {
						
							result.add(usv);
							
						
					}
				}
			} else {
				
					result.add(usv);
					
			}
		}
		usv = null;
		return result;
	}

	public User findByIdentifyNumber(String identifyNum) {
		// TODO Auto-generated method stub
		String hql = "from User where identifyNum = ?";
		List<User> userList = UserDao.queryList(hql, new Object[]{identifyNum});
		if (null == userList || 0 == userList.size() ){
			return null;
		}else
			return userList.get(0);

	}
	/**
	 * 获取最大员工号
	 * @param year
	 * @return
	 */
	public Integer queryMaxNumber(String year){
		String hql = "from User where number in (select (MAX(number)) as number from User where number like '"+year+"10%')";
		List<User> userList = UserDao.queryList(hql,null);
		if (null == userList || 0 == userList.size())
			return null;
		return Integer.valueOf(UserDao.queryList(hql,null).get(0).getNumber())+1;
	}
	/**
	 * 检测是否和其他模块有关联
	 * @param user
	 * @return
	 */
	
	public boolean isInOtherMK(User user){
		boolean result=false;
		
		/* 这里检测是否和其他模块有关联，目前不确定 其他模块 指的是哪些模块，所以直接返回没有关联*/
		return result;
	}

	public boolean delUsersBatch(List<User> UserList) {
		// TODO Auto-generated method stub
		for(User user : UserList){
			if(user.getId() != null){
				deleteUser(user.getId());
			}
		}
		return true;	
	}

	public List<User> findUsersByName(String userName) {
		String sql = "from User where replace(name,' ','') like '%"+userName.replaceAll(" ", "") +"%'";
		List<User> result = UserDao.queryList(sql,new Object[]{});
		if(result.size() == 0){
			return null;				
		}else{
			return result; 
		}
	}

	public int queryCountByName(String userName) {
		// TODO Auto-generated method stub
		String sql = "select count(*) from User as model where replace(model.name,' ','') like '%"+userName.replaceAll(" ", "") +"%'";
		return UserDao.findforCount(sql,new Object[]{});
		
	}
	/**
	 * judge if first param bigger than the second
	 * @param L1
	 * @param L2
	 * @return
	 */
	private boolean comparePositionLevel(String L1,String L2) {
		if (StringUtil.isBlank(L1)) return false;
		if (StringUtil.isBlank(L2)) return true;
		String sql = "from DictionaryDb where parentCode = '13' and value = ?";
		List<DictionaryDb> dictionaryDbs1 = dictionaryDao.queryList(sql, new Object[]{L1});
		List<DictionaryDb> dictionaryDbs2 = dictionaryDao.queryList(sql, new Object[]{L2});
		if (0 == dictionaryDbs1.size()) return false;
		if (0 == dictionaryDbs2.size()) return true;
		return dictionaryDbs1.get(0).getId() > dictionaryDbs2.get(0).getId();
	}
}
