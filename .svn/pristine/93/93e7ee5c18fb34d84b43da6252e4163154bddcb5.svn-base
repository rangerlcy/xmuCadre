package com.cadre.controller.secondment;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.FormParam;

import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cadre.common.ViewLocation;
import com.cadre.common.WebApplication;

import com.cadre.controller.convertor.UserConvertor;
import com.cadre.controller.pojo.PositionPaperItem;
import com.cadre.controller.pojo.SecondmentPaperItem;
import com.cadre.controller.pojo.SecondmentPaperParam;
import com.cadre.controller.report.ReportParam;
import com.cadre.model.dictionary.DictionaryItem;
import com.cadre.model.excel.DataErrorMsg;
import com.cadre.model.excel.ExcelImportorAdapter;
import com.cadre.model.page.Page;
import com.cadre.model.utils.DateUtil;
import com.cadre.model.utils.StringUtil;
import com.cadre.model.view.ViewFunction;
import com.cadre.pojo.Paper;
import com.cadre.pojo.Position;
import com.cadre.pojo.PostUser;
import com.cadre.pojo.Report;
import com.cadre.pojo.Secondment;
import com.cadre.pojo.SecondmentUser;
import com.cadre.pojo.User;
import com.cadre.pojo.WorkingPaper;
import com.cadre.service.infoManager.TableMappingService;
import com.cadre.service.position.PaperService;
import com.cadre.service.secondment.SecondmentService;
import com.cadre.service.secondment.SecondmentUserService;
import com.cadre.service.sys.UserService;
@Controller
@RequestMapping(ViewLocation.FOLDER_SECONDMENT)
public class SecondmentController {
		private Logger logger = LogManager.getLogger(SecondmentController.class);

		@Autowired
		SecondmentService secondmentService;
		@Autowired
		TableMappingService tableMappingService;
		@Autowired
		SecondmentUserService secondmentUserService;
		@Autowired
		PaperService paperService;
		@Autowired
		UserService userService;
		int pageSize = 10;
		@RequestMapping(value="/secondment")
		public String secondment(Integer currPage,String queryStr,Model model) throws Exception{
			try {
				if(currPage == null) currPage = 1;//默认显示第一页
				Page<Secondment> queryList = secondmentService.queryPage(queryStr, currPage, pageSize);
				model.addAttribute("queryStr", queryStr);//查询条件返回jsp页面
				model.addAttribute("queryList",queryList);//查询结果列表
				model.addAttribute("isSuperSearch", "0");
				return ViewLocation.FOLDER_SECONDMENT+"/secondment";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		//按挂职项目排序
		@RequestMapping(value="/orderByProject")
		public String orderByProject(Integer currPage,String queryStr,Model model) throws Exception{
			try {
				if(currPage == null) currPage = 1;//默认显示第一页
				Page<Secondment> queryList = secondmentService.queryPageByProject(queryStr, currPage, pageSize);
				model.addAttribute("queryStr", queryStr);//查询条件返回jsp页面
				model.addAttribute("queryList",queryList);//查询结果列表
				model.addAttribute("isSuperSearch", "0");
				return ViewLocation.FOLDER_SECONDMENT+"/secondment";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
	
		/**
		 * 高级搜索功能
		 * @param currPage
		 * @param postingNumber
		 * @param postingTitle
		 * @param postingUnit
		 * @param temporaryProjectName
		 * @param temporaryBeginDayOperator
		 * @param temporaryBeginDay
		 * @param temporaryEndDateOperator
		 * @param temporaryEndDate
		 * @param temporaryRequirement
		 * @param remark
		 * @param model
		 * @return
		 * @throws Exception
		 */

		@RequestMapping("/SuperSearchSecondment")
		public String SuperSearchUserList(Integer currPage,SecondmentParam secondmentParam,Model model) throws Exception{
			
			
			Page<Secondment> queryList = secondmentService.findSearchSecondmentByPage(secondmentParam, currPage, pageSize);
			
			model.addAttribute("queryList",queryList);//查询结果列表
			model.addAttribute("postingNumber",secondmentParam.getPostingNumber());
			model.addAttribute("postingTitle",secondmentParam.getPostingTitle());
			model.addAttribute("postingUnit",secondmentParam.getPostingUnit());
			model.addAttribute("temporaryProjectName",secondmentParam.getTemporaryProjectName());
			model.addAttribute("temporaryBeginDayOperator",secondmentParam.getTemporaryBeginDayOperator());
			model.addAttribute("temporaryBeginDay",secondmentParam.getTemporaryBeginDay());
			model.addAttribute("temporaryEndDateOperator",secondmentParam.getTemporaryEndDateOperator());
			model.addAttribute("temporaryEndDate",secondmentParam.getTemporaryEndDate());
			
			model.addAttribute("temporaryRequirement",secondmentParam.getTemporaryRequirement());
			
			model.addAttribute("remark",secondmentParam.getRemark());
	
			model.addAttribute("isSuperSearch", "1");
			return ViewLocation.FOLDER_SECONDMENT+"/secondment";
		}

		/**
		 * 打开导入新挂职信息页面
		 * @param model
		 * @return
		 */
		@RequestMapping("/preImportSecondment")
		public String preImport(Model model){
			return ViewLocation.FOLDER_SECONDMENT+"/import";
		}
		/**
		 * 导入挂职信息操作
		 * @throws Exception 
		 */
		@RequestMapping("/importAddSecondment")
		public String importInfo(@RequestParam("file") MultipartFile file, final Model model) throws Exception{
			try {
				ExcelImportorAdapter<Secondment> importor = new ExcelImportorAdapter<Secondment>() {
					@Override
					protected String importBiz(List<Secondment> successList,
							List<DataErrorMsg> errorList){
						secondmentService.saveSecondmentsBatch(successList);
						model.addAttribute("successSize", successList.size());
						model.addAttribute("failSize", errorList.size());
						model.addAttribute("errorList",errorList);
						return "success";
					}
				};
				List<Secondment> list = secondmentService.queryAll();
		//		SecondmentConvertor convertor = new SecondmentConvertor(list);
				String result;
				try {
		//			result = importor.importData(file,convertor);
				} catch (Exception e) {
					logger.error(e.getMessage(),e);
					result = "fail";
					model.addAttribute("failDetail", e.getMessage());
				}
				
			//	model.addAttribute("result", result);
				
				//返回导入页面
				return ViewLocation.FOLDER_SECONDMENT+"/import";		
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		/**
		 * 检查被发文文号是否已存在
		 * @param postingNumber
		 * @return
		 * @throws Exception
		 */
		@RequestMapping("/checkPaperNumber")
		@ResponseBody
		public String checkPaperNumber (String paperNumber) throws Exception {
			try {
				int count = secondmentService.getCount("paperNumber",paperNumber);
				if(count == 0){
					return "success";
				}else{
					return "failure";
				}
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}

		/**
		 * 修改资源信息前，查出对应的资源信息
		 * @param id
		 * @param model
		 * @return
		 * @throws Exception 
		 */
		@RequestMapping("/preSecondmentUpdate")
		public String preSecondmentUpdate(Integer id,Model model) throws Exception{
			try {
				if (null == id){
					model.addAttribute("errMsg", "无此挂职信息");
					return ViewLocation.FOLDER_MSGCOMMON+"/fail";
				}
				Secondment secondment = secondmentService.findById(id);
				if (null == secondment){
					model.addAttribute("errMsg", "无此挂职信息");
					return ViewLocation.FOLDER_MSGCOMMON+"/fail";
				}
				model.addAttribute("secondment", secondment);
				return ViewLocation.FOLDER_SECONDMENT+"/secondmentEdit";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		/**
		 * 打开新增挂职信息页面
		 * @param model
		 * @return
		 * @throws Exception 
		 */
		@RequestMapping("/preAddSecondment")
		public String preAddSecondment(Model model) throws Exception {
			try {
				return ViewLocation.FOLDER_SECONDMENT+"/secondmentAdd";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		//打开新增参加挂职人员页面
		@RequestMapping("preAddSecondmentUser")
		public String preAddSecondmentUser(Integer id,Model model) throws Exception {
			try {
				Secondment secondment = secondmentService.findById(id);
				
				model.addAttribute("secondment", secondment);
				
				return ViewLocation.FOLDER_SECONDMENT+"/secondmentUserAdd";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		
		//更新挂职信息
		@RequestMapping("/updateSecondments")
		@ResponseBody
		public String updateSecondments(Secondment secondment,Model model) throws Exception {
			try {
				if (null == secondment || null == secondment.getId()){
					return "noSuchSecondment";
				}
				Secondment se=secondmentService.findById(secondment.getId());

				se.setTemporaryBeginDay(secondment.getTemporaryBeginDay());
				se.setTemporaryEndDate(secondment.getTemporaryEndDate());
				se.setTemporaryProjectName(secondment.getTemporaryProjectName());
				se.setTemporaryRequirement(secondment.getTemporaryRequirement());
				se.setRemark(secondment.getRemark());
				
				secondmentService.updateSecondment(se);
				return "success";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		/**
		 * 挂职详情？
		 * @param id
		 * @param model
		 * @return
		 * @throws Exception
		 */
		@RequestMapping("/secondmentDetail")
		public String secondmentDetail(Integer id,Model model) throws Exception{	
			try {
				if (null == id){
					model.addAttribute("errMsg", "无此详细信息");
					return ViewLocation.FOLDER_MSGCOMMON+"/fail";
				}
				/*Paper paper = paperService.findById(id);
				if (null == paper){
					model.addAttribute("errMsg", "无此详细信息");
					return ViewLocation.FOLDER_MSGCOMMON+"/fail";
				}
				model.addAttribute("aad", paper);*/
				Secondment secondmentresult = secondmentService.findById(id);
				model.addAttribute("pus", secondmentresult);
				List<SecondmentUser> secondmentUsers = null;
				secondmentUsers = secondmentUserService.findBySecondment(secondmentresult);
				model.addAttribute("secondmentUsers",secondmentUsers);
				//boolean isAdmin = WebApplication.getCurrUser().isAdmin();
				//boolean hasAdminQx = sysUserService.findUserHasRole(WebApplication.getCurrUser().getId());
				//model.addAttribute("isAdmin", isAdmin||hasAdminQx);
				return ViewLocation.FOLDER_SECONDMENT+"/secDetail";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		//新增挂职人员
			@RequestMapping("/addSecondmentUser")
			@ResponseBody
			public String addSecondmentUser(Integer secondmentId,SecondmentUserBindList secondmentUserBindList,Model model) throws Exception {
				try {
					if (null == secondmentId){
						return "error";
					}
					Secondment secondment = secondmentService.findById(secondmentId);
					if (null == secondment){
						return "error";
					}
					if (null == secondmentUserBindList 
						|| null == secondmentUserBindList.getSecondmentUserList()
						|| 0 == secondmentUserBindList.getSecondmentUserList().size()) {
						return "nobody";
					}
					secondmentService.saveSecondmentUsers(secondment,secondmentUserBindList.getSecondmentUserList());
					
					return "success";
				} catch (Exception e) {
					logger.error(e.getMessage());
					throw new Exception(e.getMessage());
				}
			}
		//新增挂职信息
		@RequestMapping("/addSecondments")
		@ResponseBody
		public String addSecondments(Paper paper,SecondmentPaperParam secondment,Model model) throws Exception {
			try {
				if(null == paper.getPaperName()
				|| null == paper.getPaperNumber() 
				||null == paper.getPaperUnits() 
				||null==secondment||
				null == secondment.getSecondmentPaperItems()||
				0 == secondment.getSecondmentPaperItems().size())
				{
					model.addAttribute("errMsg","请填入正确的信息");
					return "fail";
				}
				//添加发文
				Paper pr= new Paper();
				pr.setPaperDay(DateUtil.currentTime().toDate());
				pr.setPaperName(paper.getPaperName());
				pr.setPaperNumber(paper.getPaperNumber() );
				pr.setPaperType(2);//修改发文类型
				pr.setPaperUnits(paper.getPaperUnits());
				paperService.addPaper(pr);
				
				for (SecondmentPaperItem item : secondment.getSecondmentPaperItems()){
						if (item.getTemporaryProjectName() != null){
							addSecondmentByPaper(pr,item);
						}
						}
						return "success";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		//删除挂职信息
		@RequestMapping("/delSecondments")
		@ResponseBody
		public String delSecondments(Integer id,Model model) throws Exception {
			try {
				secondmentService.delSecondment(id);
				return "success";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		//导出文件
		@RequestMapping("/exportSecondment")
		public void exportSecondment(String queryStr,String isSuperSearch,SecondmentParam secondmentParam,String titles,HttpServletResponse response) throws Exception{
			if (StringUtil.isNotBlank(isSuperSearch)){
				List<Secondment> secondments = null;
				if ("0".equals(isSuperSearch)){
					if (StringUtil.isNotBlank(queryStr)) {
						try {
							queryStr = java.net.URLDecoder.decode(queryStr, "UTF-8");

						} catch (Exception e) {
							logger.error("导出文件解码错误：" + e.getMessage());
							throw new Exception(e.getMessage());
						}
					}
					secondments = secondmentService.findSecondmentForExport(queryStr);
				}else if ("1".equals(isSuperSearch)){

					try {
						secondmentParam = decodeSecondmentParam(secondmentParam);
					} catch (Exception e) {
						logger.error("导出文件解码错误：" + e.getMessage());
						throw new Exception(e.getMessage());
					}
					secondments = secondmentService.findSuperSecondmentForExport(secondmentParam);
				}
//				if (secondments.size()==0){
//					return ;
//				}
				String fileName = "";
				String dir = WebApplication.getSession().getServletContext().getRealPath("/resources/downloadFile/");
				String tempFileName = dir+"/user.xls";
				fileName= "secondment"+System.currentTimeMillis()+".xls";
				Workbook wb = Workbook.getWorkbook(new File(tempFileName));
		    	WritableWorkbook wwb = Workbook.createWorkbook(new File(dir+"/"+fileName), wb); 
		        WritableSheet sheet =wwb.getSheet(0);
		       
		        List<DictionaryItem> titleList = ViewFunction.getSecondmentTitles();
		        int n = 0;
		  		for (DictionaryItem item: titleList){
		  			//先添加标题
		  			Label titleLabel = new Label(n,0,item.getValue());
		  			n = n+1;
		  			sheet.addCell(titleLabel);
		  		}
		  		for(int i=0;i<secondments.size();i++){//循环写数据
		      		for(n=0;n<titleList.size();n++){
		      			String value = tableMappingService.getSecondmentColVal(secondments.get(i), titleList.get(n).getKey());
		      			Label valueLabel = new Label(n,i+1,value);
		      			sheet.addCell(valueLabel);
		      		}
		      	}
		  		wwb.write();  
		    	wwb.close();
		    	BufferedInputStream bis = null;
				BufferedOutputStream bos = null;
				try {
					response.setContentType("video/mpeg4; charset=utf-8");
					response.setHeader("Content-Disposition",
							"attachment;filename=\"secondment.xls\"");
					File file = new File(dir+"/"+fileName);
					int len = 0;    
					byte[] buf = new byte[1024];    
					bis = new BufferedInputStream(new FileInputStream(file));  
					bos = new BufferedOutputStream(response.getOutputStream());    
					while (-1 != (len = bis.read(buf, 0, buf.length))) {   
		                bos.write(buf, 0, len);   
		            }
				} catch (Exception e) {
					logger.error("导出挂职信息错误:" + e.getMessage());
					throw new Exception("导出挂职信息错误:" + e.getMessage());
				} finally {
					try {
						if (bis != null)   
			                bis.close();   
			            if (bos != null)   
			                bos.close();
					} catch (Exception e2) {
						logger.error(e2.getMessage());
					}
					//删除临时文件
					File f = new File(dir+"/"+fileName); 
					if (f.exists()){
						f.delete(); 
					}
				}
				
				
			}
		}
		/**
		 * 打开批量界面
		 * @return
		 */
		@RequestMapping("openSecondmentBatchAction")
		public String openSecondmentBatchAction(){
			return ViewLocation.FOLDER_SECONDMENT + "/import";
		}
		/**
		 * 打开增加挂职人员页面
		 * @param id
		 * @param model
		 * @return
		 */
		@RequestMapping(value="openAddSecondmentUser")
		public String openAddSecondmentUser(Integer id,Model model){
			if (id == null){
				model.addAttribute("errMsg", "无此挂职信息");
				return ViewLocation.FOLDER_MSGCOMMON+"/fail";
			}
			Secondment secondment = secondmentService.findById(id);
			if (null == secondment){
				model.addAttribute("errMsg", "无此挂职信息");
				return ViewLocation.FOLDER_MSGCOMMON+"/fail";
			}
			model.addAttribute("secondment", secondment);
			List<SecondmentUser> secondmentUsers = null;
			secondmentUsers = secondmentUserService.findBySecondment(secondment);
			model.addAttribute("secondmentUsers",secondmentUsers);
			return ViewLocation.FOLDER_SECONDMENT+"/secondmentUserAdd";
		}
		
		/**
		 * 删除挂职人员
		 * @param secondmentId
		 * @param secondmentUserBindList
		 * @return
		 * @throws Exception
		 */
		@RequestMapping("delSecondmentUser")
		@ResponseBody
		public String delSecondmentUser(Integer secondmentId,SecondmentUserBindList secondmentUserBindList) throws Exception{
			try {
				if (null == secondmentId){
					return "error";
				}
				Secondment secondment = secondmentService.findById(secondmentId);
				if (null == secondment){
					return "error";
				}
				if (null == secondmentUserBindList 
					|| null == secondmentUserBindList.getSecondmentUserList()
					|| 0 == secondmentUserBindList.getSecondmentUserList().size()) {
					return "nobody";
				}
				for (SecondmentUserParam secondmentUserParam : secondmentUserBindList.getSecondmentUserList()) {
					secondmentUserService.delSecondmentUserByUserId(secondment,secondmentUserParam.getUserId());
				}
				
				
				return "success";
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
		
		/**
		 * 打开删除挂职人员页面
		 * @param id
		 * @param model
		 * @return
		 */
		@RequestMapping(value="openDelSecondmentUser")
		public String openDelSecondmentUser(Integer id,Model model){
			if (id == null){
				model.addAttribute("errMsg", "无此挂职信息");
				return ViewLocation.FOLDER_MSGCOMMON+"/fail";
			}
			Secondment secondment = secondmentService.findById(id);
			if (null == secondment){
				model.addAttribute("errMsg", "无此挂职信息");
				return ViewLocation.FOLDER_MSGCOMMON+"/fail";
			}
			model.addAttribute("secondment", secondment);
			List<SecondmentUser> secondmentUsers = null;
			secondmentUsers = secondmentUserService.findBySecondment(secondment);
			model.addAttribute("secondmentUsers",secondmentUsers);
			return ViewLocation.FOLDER_SECONDMENT+"/secondmentUserDel";
		}
		/*@RequestMapping("addSecondmentUser")
		public String addSecondmentUser(SecondmentUserBindList secondmentUserBindList){
			if (secondmentUserBindList==null){
				return "";
			}
			for (SecondmentUserParam secondmentUser: secondmentUserBindList.getSecondmentUserList()){
				System.out.println(secondmentUser.getRemark());
			}
			
			return "";
		}*/
private SecondmentParam decodeSecondmentParam(SecondmentParam secondmentParam) throws Exception{
			
			try {
				secondmentParam.setPostingNumber(StringUtil.decodeUTF8(secondmentParam.getPostingNumber()));
				secondmentParam.setPostingUnit(StringUtil.decodeUTF8(secondmentParam.getPostingUnit()));
				secondmentParam.setPostingTitle(StringUtil.decodeUTF8(secondmentParam.getPostingTitle()));
				secondmentParam.setTemporaryProjectName(StringUtil.decodeUTF8(secondmentParam.getTemporaryProjectName()));
				secondmentParam.setTemporaryBeginDayOperator(StringUtil.decodeUTF8(secondmentParam.getTemporaryBeginDayOperator()));
				secondmentParam.setTemporaryEndDateOperator(StringUtil.decodeUTF8(secondmentParam.getTemporaryEndDateOperator()));
				secondmentParam.setTemporaryRequirement(StringUtil.decodeUTF8(secondmentParam.getTemporaryRequirement()));
				secondmentParam.setRemark(StringUtil.decodeUTF8(secondmentParam.getRemark()));
				
				secondmentParam.setTemporaryBeginDay(secondmentParam.getTemporaryBeginDay());
				secondmentParam.setTemporaryEndDate(secondmentParam.getTemporaryEndDate());
			return secondmentParam;
			} catch (Exception e) {
				throw new Exception(e);
			}
		}

//按照发文保存挂职信息
@Transactional
private void addSecondmentByPaper(Paper paper,SecondmentPaperItem item){
	Secondment secondment = new Secondment();
	secondment.setTemporaryProjectName(item.getTemporaryProjectName() == null ? null:item.getTemporaryProjectName());
	secondment.setTemporaryRequirement(item.getTemporaryRequirement() == null ? null : item.getTemporaryRequirement());
	secondment.setTemporaryBeginDay(item.getTemporaryBeginDay() == null ? null :  item.getTemporaryBeginDay());
	secondment.setPaper(paper);
	secondment.setTemporaryEndDate(item.getTemporaryEndDate() == null ? null :  item.getTemporaryEndDate());
	secondment.setDelFlag(1);
	secondmentService.saveSecondment(secondment);
	
	//历史岗位信息
	//this.savePositonHistory(paper, position, 1);
	return;
}

}












