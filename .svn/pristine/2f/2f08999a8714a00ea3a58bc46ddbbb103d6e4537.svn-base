package com.cadre.controller.position;

import java.io.File;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cadre.common.ViewLocation;
import com.cadre.common.WebApplication;
import com.cadre.controller.pojo.PositionPaperItem;
import com.cadre.controller.pojo.PositionPaperParam;
import com.cadre.controller.pojo.PositionSimple;
import com.cadre.controller.sys.UserController;
import com.cadre.model.page.Page;
import com.cadre.model.utils.DateUtil;
import com.cadre.model.view.ViewFunction;
import com.cadre.pojo.Organization;
import com.cadre.pojo.OrganizationHistory;
import com.cadre.pojo.Paper;
import com.cadre.pojo.Position;
import com.cadre.pojo.PositionHistory;
import com.cadre.service.position.PaperService;
import com.cadre.service.position.PositionHistoryService;
import com.cadre.service.position.PositionService;
import com.cadre.service.position.PostHistoryService;
import com.cadre.service.sys.AppointAndDismissService;
import com.cadre.service.sys.OrganizationHistoryService;
import com.cadre.service.sys.OrganizationService;

@Controller
@RequestMapping(ViewLocation.FOLDER_POSITION)
public class PositionController {
	private Logger logger = LogManager.getLogger(UserController.class);
	
	@Autowired
	PositionService positionService;
	@Autowired
	OrganizationService organizationService;
	@Autowired
	PaperService paperService;
	@Autowired
	PositionHistoryService positionHistoryService;
	@Autowired
	OrganizationHistoryService organizationHistoryService;
	@Autowired
	PostHistoryService postHistoryService;
	@Autowired
	AppointAndDismissService appointAndDismissService;
	int pageSize=10;
	
	/**
	 * 分页查询岗位信息
	 * @param currPage
	 * @param queryStr
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("positionList")
	public String positionList(Integer currPage,String queryStr,Model model) throws Exception{
		try {
			if (currPage == null) currPage = 1;
			Page<Position> queryList = positionService.findPositionByPage(queryStr, currPage, pageSize);
			model.addAttribute("queryStr", queryStr);//查询条件返回jsp页面
			model.addAttribute("queryList",queryList);//查询结果列表
			
			List<Organization> organizations = organizationService.queryAll();
			Map<String, Organization> orgMap = this.getOrgMap(organizations);
			model.addAttribute("orgMap", orgMap);
			model.addAttribute("today",new Date());
		} catch (Exception e) {
			// TODO: handle exception
			logger.error(e.getMessage());
			throw new Exception(e.getMessage());
		}
		
		return ViewLocation.FOLDER_POSITION+"/positionList";
	}
	/**
	 * 组织机构形成map
	 * @param organizations
	 * @return
	 */
	private Map<String, Organization> getOrgMap(List<Organization> organizations) {
		// TODO Auto-generated method stub
		Map<String, Organization> orgMap = new HashMap<String, Organization>();
		for (Organization organization : organizations){
			orgMap.put(organization.getCode(), organization);
		}
		return orgMap;
	}
	
	/**
	 * 打开详情页面
	 * @param id
	 * @param model
	 * @return
	 */
	@RequestMapping("openPositionDetail")
	public String openPositionDetail(Integer id,Model model){
		if (id == null){
			return ViewLocation.FOLDER_MSGCOMMON+"/fail";
		}
		Position position = positionService.findById(id);
		if (null == position){
			return ViewLocation.FOLDER_MSGCOMMON+"/fail";
		}
		model.addAttribute("position", position);
		List<Organization> organizations = organizationService.queryAll();
		Map<String, Organization> orgMap = new HashMap<String, Organization>();
		for (Organization org : organizations){
			orgMap.put(org.getCode(), org);
		}
		model.addAttribute("orgMap", orgMap);
		return ViewLocation.FOLDER_POSITION+"/positionDetail";
	}
//	/**
//	 * 删除岗位
//	 * @param id
//	 * @return
//	 */
//	@RequestMapping("positionDel")
//	@ResponseBody
//	public String positionDel(Integer id){
//		if (id == null){
//			return "fail";
//		}
//		Position position = positionService.findById(id);
//		if (null == position){
//			return "fail";
//		}
//		List<PostHistory> postHistories= positionService.delete(position);
//		if (null == postHistories)
//			return "{\"result\":\"成功\",\"names\":}";
//		else {
//			List<String> nameStrings = new ArrayList<String>();
//			for (PostHistory postHistory :postHistories){
//				nameStrings.add(postHistory.getUser().getName());
//			}
//			return "{\"result\":\"成功\",\"names\":\""+listToString(nameStrings) +"\"}";
//			
//		}
//	}
	
	/**
	 * 打开增加岗位
	 * @param model
	 * @return
	 */
	@RequestMapping("openPositionAdd")
	public String openPositionAdd(Model model){
		List<Organization> organizations = organizationService.queryAll();
		model.addAttribute("organizations", organizations);
		return ViewLocation.FOLDER_POSITION +"/positionAdd";
	}
	
	/**
	 * 按照发文增加岗位
	 * @param position
	 * @return
	 */
	@RequestMapping("positionAdd")
	@Transactional
	public String positionAdd(String paperName,String paperNumber,Date paperDay,@RequestParam(value = "file",required = false) MultipartFile file,PositionPaperParam positions,Model model ){
		List<String> errMsgList = new ArrayList<String>();
		if (null == paperName || 
			null == paperNumber || 
			null == positions || 
			null == positions.getPositionPaperItems()||
			0 == positions.getPositionPaperItems().size()){
			errMsgList.add("请检验输入的信息是否完整");
			model.addAttribute("errMsg",errMsgList.get(0));
			return ViewLocation.FOLDER_MSGCOMMON + "/fail";
		}
		//添加发文
		Paper paper = new Paper();
		paper.setPaperDay(paperDay);
		paper.setPaperName(paperName);
		paper.setPaperNumber(paperNumber);
		paper.setPaperType(1);//岗位组织机构修改发文类型
		paper.setPaperUnits("");
		if (null != file && null != file.getOriginalFilename() && !"".equals(file.getOriginalFilename())){
			
			String fileName = file.getOriginalFilename();//上传的文件名
			String[] nameArr = fileName.split("\\.");
			String suff = nameArr[nameArr.length-1];
			fileName = paperNumber + UUID.randomUUID() +"."+suff;
			String path = WebApplication.getSession().getServletContext().getRealPath("../uploadFile/paper/");
			File targetFile = new File(path, fileName);  
			if(!targetFile.exists()){  
				targetFile.mkdirs();  
			} 
			//保存  
			paper.setPaperFile("../uploadFile/paper/" + fileName);
			try {  
				file.transferTo(targetFile);  
			} catch (Exception e) {  
				throw new RuntimeException("文件保存异常"+e.getMessage()); 
			}finally{
				
			}
			
		}
		
		
		paperService.addPaper(paper);
	
		List<Organization> organizations = organizationService.queryAll();
		
		List<PositionPaperItem> OldOrganizations = new ArrayList<PositionPaperItem>();
		List<PositionPaperItem> OldPositions = new ArrayList<PositionPaperItem>();
		Map<String,Organization> orgMap = this.getOrgMap(organizations);
		for (PositionPaperItem item : positions.getPositionPaperItems()){
			if (item.getActionType().equals("1")){//增岗或者组织机构
				if (item.getPositionName() != null){//岗位
					addPositonByPaper(paper,item);
				}else{//增加组织机构					
					if (null == item.getAcadmy()) {
						errMsgList.add("增、撤 栏目下序号为 "+item.getIndex()+" 的失败，原因是其中【院/单位】栏位不能为空");
						continue;
					}
					addOrgByPaper(paper, item, orgMap);				
				}
			}else if (item.getActionType().equals("2")) {//撤岗或者撤销组织机构
				if (null != item.getPositionName()){//撤岗
					errMsgList.addAll(delPostionByPaper(paper, item));	
					
				}else{//撤销组织机构
					delOrgByPaper(paper, item, orgMap);
				}
			}else if (item.getActionType().equals("4")){//修改增岗
				if (item.getPositionName() != null){//岗位（增岗）
					
				}else{//修改组织机构
					/* 再次遍历时候处理*/
				}
			}else if (item.getActionType().equals("3")){//修改撤岗
				if (item.getPositionName() != null){//岗位（撤岗）先取出
					OldPositions.add(item);
				}else { //待修改组织机构先取出
					OldOrganizations.add(item);
				}
				
			}
			
		}

		/* 单独处理组织机构修改*/
		for (PositionPaperItem item : positions.getPositionPaperItems()){
			if (item.getActionType().equals(3)){
				if (item.getPositionName() == null){
					for (PositionPaperItem item2 : OldOrganizations){
						if (item.getIndex().equals(item2.getIndex())){
							orgMap = updateOrgByPaper(item,item2,paper,orgMap);
						}
					}
				}
				else {
					for (PositionPaperItem item2 : OldPositions){
						if (item.getIndex().equals(item2.getIndex())){//岗位
							errMsgList.addAll(updatePositonByPaper(item,item2,paper));
						}
					}
				}
			}			
		}
		model.addAttribute("errList", errMsgList);
		return ViewLocation.FOLDER_POSITION + "/positionAddResult";
	}
	/**
	 * 根据发文修改岗位
	 * @param newItem
	 * @param oldItem
	 * @param paper
	 * @return
	 */
	private List<String> updatePositonByPaper(
			PositionPaperItem newItem, PositionPaperItem oldItem, Paper paper) {
		// TODO Auto-generated method stub
		newItem.setAcadmy(oldItem.getAcadmy());
		newItem.setDepartment(oldItem.getDepartment());
		addPositonByPaper(paper, newItem);
		return delPostionByPaper(paper, oldItem);
	}
	/**
	 * 根据发文修改组织机构
	 * @param item
	 * @param item2
	 * @param paper
	 * @param orgMap
	 */
	private Map<String, Organization> updateOrgByPaper(PositionPaperItem newItem,
			PositionPaperItem oldItem, Paper paper,
			Map<String, Organization> orgMap) {
		// TODO Auto-generated method stub
		Organization organization;
		if (null == newItem.getAcadmy()){
			return orgMap;
		}
		if (null == newItem.getDepartment()){//修改院级单位
			organization = orgMap.get(oldItem.getAcadmy());
			if (organization.getName().equals(newItem.getAcadmy()))
				return orgMap;
			organization.setName(newItem.getAcadmy());
			saveOrganizationHistory(paper, organization, 2, newItem.getActionDay());
			orgMap.put(oldItem.getAcadmy(), organization);
		}else {
			organization = orgMap.get(oldItem.getDepartment());
			if (organization.getName().equals(newItem.getDepartment()))
				return orgMap;
			organization.setName(newItem.getDepartment());
			saveOrganizationHistory(paper, organization, 2, newItem.getActionDay());
			orgMap.put(oldItem.getDepartment(), organization);
		}
		return orgMap;
	}
	/**
	 * 按照发文增岗(并记录历史)
	 * @param paper
	 * @param item
	 */
	@Transactional
	private void addPositonByPaper(Paper paper,PositionPaperItem item){
		Position position = new Position();
		position.setAcademy(item.getAcadmy() == null ? null:item.getAcadmy());
		position.setDepartment(item.getDepartment() == null ? null : item.getDepartment());
		position.setIsDelWithUser(item.getIsDelWithUser() == null ? 0 : item.getIsDelWithUser());
		position.setPaper(paper);
		position.setPositionLevel(item.getPositionLevel() == null ? null : item.getPositionLevel());
		position.setPositionName(item.getPositionName() == null ? null : item.getPositionName());
		position.setPositionType(item.getPositionType() == null ? null : item.getPositionType());
		position.setDelFlag(1);
		position.setPositionDay(DateUtil.currentTime().toDate());
		positionService.save(position);
		
		//历史岗位信息
		this.savePositonHistory(paper, position, 1, item.getActionDay());
		return;
	}
	/**
	 * 根据发文添加组织机构
	 * @param paper
	 * @param item
	 * @param orgMap
	 * @return
	 */
	@Transactional
	private Map<String, Organization> addOrgByPaper(Paper paper,PositionPaperItem item,Map<String, Organization> orgMap){
		Organization organizationAcadmy = new Organization();	
		if (!orgMap.containsKey(item.getAcadmy())){//不存在院级别单位 创建之
			organizationAcadmy.setName(item.getAcadmy());
			organizationAcadmy.setParentCode("01");
			organizationAcadmy.setCode(this.generateOrgCode("01", orgMap));
			organizationAcadmy.setDelFlag(1);
			organizationService.save(organizationAcadmy);
			orgMap.put(organizationAcadmy.getCode(), organizationAcadmy);
			//添加历史信息
			this.saveOrganizationHistory(paper, organizationAcadmy, 1, item.getActionDay());
		}else {
			organizationAcadmy = orgMap.get(item.getAcadmy());
		}
		if (null == item.getDepartment()) return orgMap;//如果系级别单位没填 结束
		
		Organization organizationDept = new Organization();
		if (!orgMap.containsKey(item.getAcadmy())) {//不存在此系级别单位 创建之
			organizationDept.setName(item.getDepartment() == null ? null : item.getDepartment());
			organizationDept.setParentCode(organizationAcadmy.getCode());
			organizationDept.setCode(this.generateOrgCode(organizationAcadmy.getCode(), orgMap));
			organizationDept.setDelFlag(1);
			organizationService.save(organizationDept);
			orgMap.put(organizationDept.getCode(), organizationDept);
			//添加历史信息
			this.saveOrganizationHistory(paper, organizationDept, 1,item.getActionDay());
		}
		return orgMap;
	}
	/**
	 * 按照发文撤岗
	 * @param paper
	 * @param item
	 */
	private List<String> delPostionByPaper(Paper paper,PositionPaperItem item){
		List<String> errMsgList = new ArrayList<String>();
		if (null == item.getPositionId()) {
			errMsgList.add("增、撤 栏目下序号为 "+item.getIndex()+" 的撤岗失败，原因是不存在此岗位");
			return errMsgList;
		}
		Position position = positionService.findById(item.getPositionId());
		if (null == position) {
			errMsgList.add("增、撤 栏目下序号为 "+item.getIndex()+" 的撤岗失败，原因是不存在此岗位");
			return errMsgList;
		}
		if (null == item.getIsDelWithUser() || item.getIsDelWithUser().equals(1)){
			position.setDelFlag(0);
		}else {
			 if (appointAndDismissService.getPostUserByPosition(position)>0){
				errMsgList.add("增、撤 栏目下序号为 "+item.getIndex()+" 的撤岗失败，原因是此岗位还有任职信息存在");
				return errMsgList;
			 }else {
				position.setDelFlag(0);
			}
		}					
		positionService.update(position);
		
		//历史岗位信息
		this.savePositonHistory(paper, position, 0,item.getActionDay());
		return errMsgList;
	}
	/**
	 * 按照发文撤销组织机构
	 * @param paper
	 * @param item
	 * @param orgMap
	 * @return
	 */
	private  Map<String, Organization> delOrgByPaper(Paper paper,PositionPaperItem item,Map<String, Organization> orgMap){
		if (null == item.getDepartment()){//撤销院级
			if (null == item.getAcadmy()){
				return orgMap;
			}else {//撤销院级单位
				if (!orgMap.containsKey(item.getAcadmy())){
					return orgMap;
				}else {
					Organization organizationAcadmy = orgMap.get(item.getAcadmy());
					organizationService.delete(organizationAcadmy);//伪删除					
					orgMap.remove(organizationAcadmy.getCode());
					//历史记录
					saveOrganizationHistory(paper, organizationAcadmy, 0,item.getActionDay());
				}
			}	
		}else {
			if (null == item.getAcadmy()){//逻辑错误，不处理了
				return orgMap;
			}else {
				if (!orgMap.containsKey(item.getDepartment())){//不存在这个组织
					return orgMap;
				}else {
					Organization organizationDept = orgMap.get(item.getDepartment());
					organizationService.delete(organizationDept);
					orgMap.remove(organizationDept.getCode());
					//历史记录
					saveOrganizationHistory(paper, organizationDept, 0,item.getActionDay());
					
				}
			}
		}
		return orgMap;
		
	}
	/**
	 * 添加岗位修改历史信息
	 * @param paper
	 * @param position
	 */
	private void savePositonHistory(Paper paper,Position position,Integer action,Date actionDay){
		PositionHistory positionHistory = new PositionHistory();
		positionHistory = new PositionHistory();
		positionHistory.setAcademy(position.getAcademy());
		positionHistory.setAction(action);
		positionHistory.setDepartment(position.getDepartment());
		positionHistory.setPaper(paper);
		positionHistory.setPositionLevel(position.getPositionLevel());
		positionHistory.setPositionName(position.getPositionName());
		positionHistory.setPositionType(position.getPositionType());
		positionHistory.setActionTime(new Timestamp(actionDay.getTime()));
		positionHistoryService.save(positionHistory);
	}
	/**
	 * 修改组织机构历史信息
	 * @param paper
	 * @param organization
	 * @param action
	 */
	 
	private void saveOrganizationHistory(Paper paper,Organization organization,Integer action,Date actionDay){
	
		OrganizationHistory organizationHistory = new OrganizationHistory();
		organizationHistory.setAction(action);
		organizationHistory.setCode(organization.getCode());
		organizationHistory.setName(organization.getName());
		organizationHistory.setPaper(paper);
		organizationHistory.setParentCode(organization.getParentCode());
		organizationHistory.setActionTime(new Timestamp(actionDay.getTime()));
		organizationHistoryService.save(organizationHistory);	
	}
	/**
	 * join 方法
	 * @param stringList
	 * @return
	 */
	private static String listToString(List<String> stringList){
        if (stringList==null) {
            return null;
        }
        StringBuilder result=new StringBuilder();
        boolean flag=false;
        for (String string : stringList) {
            if (flag) {
                result.append(",");
            }else {
                flag=true;
            }
            result.append(string);
        }
        return result.toString();
    }
	/**
	 * 产生组织机构的代码
	 * @param parentCode
	 * @param orgMap
	 * @return
	 */
	private String generateOrgCode(String parentCode,Map<String,Organization> orgMap){
		Random rd = new Random();
		DecimalFormat dFormat = new DecimalFormat("00");
		while(true){
			int suggestNumber = rd.nextInt(101);			
			String suggestString  = dFormat.format(suggestNumber);
			if (!orgMap.containsKey(parentCode+suggestString)) 
				return parentCode+suggestString;
		}
	}
	/**
	 * 根据系名字获取下属所有岗位
	 * @return
	 */
	@RequestMapping("queryPositionByDept")
	@ResponseBody
	@Transactional
	public List<PositionSimple> queryPositionByDept(String code) throws Exception{
		try{
			List<Position> positions =  positionService.findByDept(code);
			List<PositionSimple> positionSimples = new ArrayList<PositionSimple>();
			PositionSimple positionSimple;
			for (Position position : positions){
				positionSimple = new PositionSimple();
				
				positionSimple.setId(position.getId());
				positionSimple.setAcademy(position.getAcademy());
				positionSimple.setPositionName(position.getPositionName());
				positionSimple.setPositionLevelName(ViewFunction.getPositionLevel(position.getPositionLevel()));
				positionSimple.setPositionLevel(position.getPositionLevel());
				positionSimple.setPositionTypeName(ViewFunction.getPositionType(position.getPositionType()));
				positionSimple.setPositionType(position.getPositionType());
				positionSimples.add(positionSimple);
			}
			return positionSimples;
		}catch (Exception e) {
			// TODO: handle exception
			throw new Exception(e.getMessage());
		}
	}
	
	@RequestMapping("queryPositionById")
	@ResponseBody
	@Transactional
	public PositionSimple queryPositionById(Integer code) throws Exception{
		try {
			Position position = positionService.findById(code);
			PositionSimple positionSimple = new PositionSimple();
			positionSimple.setAcademy(position.getAcademy());
			positionSimple.setPositionName(position.getPositionName());
			positionSimple.setPositionLevelName(ViewFunction.getPositionLevel(position.getPositionLevel()));
			positionSimple.setPositionLevel(position.getPositionLevel());
			positionSimple.setPositionTypeName(ViewFunction.getPositionType(position.getPositionType()));
			positionSimple.setPositionType(position.getPositionType());
			
			// TODO judge if there are users taking this position
			
			
			return positionSimple;
		} catch (Exception e) {
			// TODO: handle exception
			throw new Exception(e.getMessage());
		}
	}
//	@RequestMapping("openPositionInvalid")
//	public String openPositionInvalid(Integer id,Model model){
//		if (id == null){
//			return "fail";
//		}
//		Position position = positionService.findById(id);
//		if (null == position){
//			return "fail";
//		}
//		model.addAttribute("position", position);
//		return ViewLocation.FOLDER_POSITION +"/positionInvalid";
//	}
	
//	
//	
//	/**
//	 * 撤岗
//	 * @param id
//	 * @return
//	 */
//	
//	@RequestMapping("positionInvalid")
//	@ResponseBody
//	public String positionInvalid(Integer id,String offPositionPaperName,String offPositionPaperNumber){
//		if (id == null){
//			return "fail";
//		}
//		Position position = positionService.findById(id);
//		if (null == position){
//			return "fail";
//		}
//		
//		if (position.getDelFlag() != null && position.getDelFlag().equals(0)){
//			return "invalid";
//		}
//		position.setOffPositionDay(new Date());
//		position.setOffPositionPaperName(offPositionPaperName);
//		position.setOffPositionPaperNumber(offPositionPaperNumber);
//		position.setDelFlag(0);
//		positionService.update(position);
//		
//		return "success";
//	}
//	/**
//	 *打开岗位修改 
//	 */
//	@RequestMapping("openPositionEdit")
//	public String openPositionEdit(Integer id,Model model){
//		if (id == null){
//			return "fail";
//		}
//		Position position = positionService.findById(id);
//		if (null == position){
//			return "fail";
//		}
//		model.addAttribute("position", position);
//		
//		List<Organization> organizations = organizationService.queryAll();
//		model.addAttribute("organizations", organizations);
//		return ViewLocation.FOLDER_POSITION +"/positionEdit";
//	}
//	
//	/**
//	 * 修改岗位
//	 * @param position
//	 * @return
//	 */
//	@RequestMapping("positionEdit")
//	@ResponseBody
//	public String positionEdit(Position position){
//		if (position == null){
//			return "fail";
//		}
//		if (position.getId() == null){
//			return "fail";
//		}
//		Position positionOld = positionService.findById(position.getId());
//		if (null == positionOld){
//			return "fail";
//		}		
//		if (positionOld.getDelFlag() != null && positionOld.getDelFlag().equals(0)){
//			return "invalid";
//		}
//		positionOld.setDelFlag(0);
//		positionOld.setOffPositionDay(new Date());
//		positionService.update(positionOld);//旧岗撤岗
//		
//		position.setId(null);//新岗位设立
//		position.setDelFlag(1);
//		position.setPositionDay(new Date());
//		positionService.save(position);
//		return "success";
//		
//	}
//	
//	/**
//	 * 打开批量岗位操作
//	 * @param model
//	 * @return
//	 */
//	@RequestMapping("batchPositionAction")
//	public String batchPositionAction(Model model){
//		List<Organization> organizations = organizationService.queryAll();
//		model.addAttribute("organizations", organizations);
//		return ViewLocation.FOLDER_POSITION+"/batchPositionAction";
//	}
//	
//	
//	@RequestMapping("importAddPosition")
//	public String importPosition(@RequestParam(value="file",required=true) MultipartFile file,final Model model) throws Exception{
//		try{
//			ExcelImportorAdapter<Position> importor = new ExcelImportorAdapter<Position>() {
//				@Override
//				protected String importBiz(List<Position> successList,
//						List<DataErrorMsg> errorList){
//					positionService.addUsersBatch(successList);
//					model.addAttribute("successSize", successList.size());
//					model.addAttribute("failSize", errorList.size());
//					model.addAttribute("errorList",errorList);
//					return "success";
//				}
//			};
//			List<Position> list = positionService.queryAll();
//			List<Organization> organizations = organizationService.queryAll();
//			PositionConvertor convertor = new PositionConvertor(list,organizations);
//			String result;
//			try {
//				result = importor.importData(file,convertor);
//			} catch (Exception e) {
//				logger.error(e.getMessage(),e);
//				result = "fail";
//				model.addAttribute("failDetail", e.getMessage());
//			}
//			
//			model.addAttribute("result", result);
//			return ViewLocation.FOLDER_POSITION+"/batchPositionAction";
//		}catch (Exception e) {
//			logger.error(e.getMessage());
//			throw new Exception(e.getMessage());
//		}
//	}
//	
//	
//	@RequestMapping("importDelPosition")
//	public String importDelPosition(@RequestParam(value="file",required=true) MultipartFile file,final Model model) throws Exception{
//		try{
//			ExcelImportorAdapter<Position> importor = new ExcelImportorAdapter<Position>() {
//				@Override
//				protected String importBiz(List<Position> successList,
//						List<DataErrorMsg> errorList){
//					positionService.delPositionsBatch(successList);
//					model.addAttribute("successSize", successList.size());
//					model.addAttribute("failSize", errorList.size());
//					model.addAttribute("errorList",errorList);
//					return "success";
//				}
//			};
//			List<Position> list = positionService.queryAll();
//			
//			PositionDelConvertor convertor = new PositionDelConvertor(list);
//			String result;
//			try {
//				result = importor.importData(file,convertor);
//			} catch (Exception e) {
//				logger.error(e.getMessage(),e);
//				result = "fail";
//				model.addAttribute("failDetail", e.getMessage());
//			}
//			
//			model.addAttribute("result", result);
//			return ViewLocation.FOLDER_POSITION+"/batchPositionAction";
//		}catch (Exception e) {
//			logger.error(e.getMessage());
//			throw new Exception(e.getMessage());
//		}
//	}
	
//	@RequestMapping("importInvalidPosition")
//	public String importInvalidPosition(@RequestParam(value="file",required=true) MultipartFile file,final Model model) throws Exception{
//		try{
//			ExcelImportorAdapter<Position> importor = new ExcelImportorAdapter<Position>() {
//				@Override
//				protected String importBiz(List<Position> successList,
//						List<DataErrorMsg> errorList){
//					positionService.updateInvalidPositionBatch(successList);
//					model.addAttribute("successSize", successList.size());
//					model.addAttribute("failSize", errorList.size());
//					model.addAttribute("errorList",errorList);
//					return "success";
//				}
//			};
//			List<Position> list = positionService.queryAll();
//			
//			PositionDelConvertor convertor = new PositionDelConvertor(list);
//			String result;
//			try {
//				result = importor.importData(file,convertor);
//			} catch (Exception e) {
//				logger.error(e.getMessage(),e);
//				result = "fail";
//				model.addAttribute("failDetail", e.getMessage());
//			}
//			
//			model.addAttribute("result", result);
//			return ViewLocation.FOLDER_POSITION+"/batchPositionAction";
//		}catch (Exception e) {
//			logger.error(e.getMessage());
//			throw new Exception(e.getMessage());
//		}
//	}
}
