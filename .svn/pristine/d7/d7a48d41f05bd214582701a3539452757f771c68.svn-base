package com.cadre.service.position;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import com.cadre.dao.BaseDao;
import com.cadre.model.page.Page;
import com.cadre.model.utils.StringUtil;
import com.cadre.pojo.Position;
import com.cadre.pojo.PostHistory;


@Service
public class PositionService {
	
	@Autowired
	BaseDao<Position> positionDao;
	@Autowired
	BaseDao<PostHistory> postHistoryDao;
	
	public void save(Position position){
		positionDao.save(position);
	}
	
	public void update(Position position){
		positionDao.update(position);
	}
	
	@Transactional(rollbackFor={Exception.class})
	public List<PostHistory> delete(Position position){
		try{
			List<PostHistory> postHistories = postHistoryDao.queryList("from PostHistory where position = ?", new Object[]{position});
			for (PostHistory posthistory : postHistories){
				postHistoryDao.delete(posthistory);
			}
			positionDao.delete(position);
			return postHistories;
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return null;
	}

	public Page<Position> findPositionByPage(String queryStr,
			Integer currPage, int pageSize) throws Exception {
		// TODO Auto-generated method stub
		Object[] args = null;
		String hqlString="from Position ps";
		String where = " (ps.delFlag is null or ps.delFlag=1 or ps.delFlag = 0) ";//撤岗还能查询
		if (StringUtil.isNotBlank(queryStr)){
			queryStr.replace(" ", "");
			where = where + " and (ps.positionName like'%"+queryStr+"%' or ps.paper.paperNumber like'%"+queryStr+"%')";
		}
		hqlString = hqlString + " where "+where;
		Page<Position> page = new Page<Position>();
		List<Position> result = positionDao.findForPage(hqlString,args,currPage,pageSize);
		int totalSize = positionDao.findforCount("select count(*) "+hqlString,args); 
		page.setResult(result);
		page.setCurrPage(currPage);
		page.setPageSize(pageSize);
		page.setTotalSize(totalSize);
		return page;
	}

	public boolean duplicatePaperNumber(String positionPaperNumber) {
		// TODO Auto-generated method stub
		String hqlString="from Position where paper.paperNumber = ?";
		List<Position> positions = positionDao.queryList(hqlString, new Object[]{positionPaperNumber});
		if (null == positions || positions.size() == 0)
			return false;
		return true;
	}

	public Position findById(Integer id) {
		// TODO Auto-generated method stub
		return positionDao.findOne(Position.class, id);
	}

	public void addUsersBatch(List<Position> successList) {
		// TODO Auto-generated method stub
		for(Position position : successList){
			positionDao.save(position);
		}
	}

	public List<Position> queryAll() {
		// TODO Auto-generated method stub
		
		return positionDao.queryList("from Position", null);
	}

	public void delPositionsBatch(List<Position> successList) {
		// TODO Auto-generated method stub
		for(Position position : successList){
			this.delete(position);
		}
	}

	public void updateInvalidPositionBatch(List<Position> successList) {
		// TODO Auto-generated method stub
		for(Position position : successList){
			position.setDelFlag(0);
			this.update(position);
		}
	}

	public List<Position> findByDept(String code) {
		// TODO Auto-generated method stub
		String hql = "from Position where department =? and (delFlag is null or delFlag = 1) ";
		return positionDao.queryList(hql, new Object[]{code});
	}
}
