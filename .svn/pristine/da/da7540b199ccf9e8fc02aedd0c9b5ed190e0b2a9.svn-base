package com.cadre.service.sys;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ch.qos.cal10n.BaseName;

import com.cadre.dao.BaseDao;
import com.cadre.model.page.Page;
import com.cadre.model.utils.StringUtil;
import com.cadre.pojo.AdministrationLevelHistory;
import com.cadre.pojo.AdministrationWorkHistory;
import com.cadre.pojo.Paper;
import com.cadre.pojo.PositionPostuser;
import com.cadre.pojo.PostHistory;
import com.cadre.pojo.User;
import com.cadre.pojo.Position;
import com.cadre.pojo.WorkingPaper;
import com.cadre.pojo.PostUser;
import com.cadre.service.appointment.PositionPostUserService;
import com.cadre.service.infoManager.AdministrationWorkService;
import com.cadre.service.infoManager.AdminstrationLevelService;
import com.cadre.service.position.PostHistoryService;

@Service
public class AppointAndDismissService {
	private Logger logger = LogManager.getLogger(AppointAndDismissService.class);
	@Autowired
	BaseDao<WorkingPaper> WorkingPaperDao;
	@Autowired
	BaseDao<PostUser> PostUserDao;
	@Autowired
	BaseDao<User> UserDao;
	@Autowired
	BaseDao<Position> PositionDao;
	@Autowired
	AdminstrationLevelService adminstrationLevelService;
	@Autowired
	AdministrationWorkService administrationWorkService;
	@Autowired
	BaseDao<AdministrationWorkHistory> administrationWorkDao;
	@Autowired
	BaseDao<AdministrationLevelHistory> adminstrationLevelDao;
	@Autowired
	BaseDao<PositionPostuser> positionPostUserDao;
	@Autowired
	PositionPostUserService positionPostUserService;
	@Autowired
	BaseDao<PostHistory> postHistoryDao;
	@Autowired
	PostHistoryService postHistoryService;
	/**
	 * 查找所有任免文件
	 * @return
	 */
	public List<WorkingPaper> queryAll(){
		String hql = "from WorkingPaper ";
		return WorkingPaperDao.queryList(hql,null);
	}
	/**
	 * 按照ID查找
	 * @return
	 */
	public WorkingPaper findById(Integer id){
		return WorkingPaperDao.findOne(WorkingPaper.class, id);
	}
	/**
	 * 按照ID查找User
	 * @return
	 */
	public User findUserById(Integer id){
		return UserDao.findOne(User.class, id);
	}
	/**
	 * 按照ID查找Position
	 * @return
	 */
	public Position findPositionById(Integer id){
		return PositionDao.findOne(Position.class, id);
	}
	/**
	 * 按照任免ID查找任免详情
	 * @return
	 */
	public List<PostUser> findPostUserByAddId(Integer id){
		String hql = "from PostUser as pu where (pu.delFlag is null or pu.delFlag=1) and pu.workingPaper.id = ?";
		List<PostUser> postuser = PostUserDao.queryList(hql, new Object[]{id});
		return postuser;	
	}
	/**
	 * 根据id查找
	 * @param id
	 * @return
	 */
	public PostUser findPostUserById(Integer id){
		return PostUserDao.findOne(PostUser.class,id);
	}
	/**
	 * 根据id查找发文
	 * @param id
	 * @return
	 */
	public WorkingPaper findWorkingPaperById(Integer id){
		return WorkingPaperDao.findOne(WorkingPaper.class,id);
	}
	/**
	 * 根据属性进行统计
	 * @param propName
	 * @param value
	 * @return
	 */
	public int queryCount(String propName, Object value){
		String sql = "select count(*) from WorkingPaper as model where model."+propName+"= ?";
		return WorkingPaperDao.findforCount(sql,new Object[]{value});
	}
	/**
	 * 根据id和属性进行统计
	 * @param propName
	 * @param value
	 * @param id
	 * @return
	 */
	public int queryCountByIdAndProp(String propName, Object value,Integer id){
		String sql = "select count(*) from WorkingPaper as model where model."+propName+"= ? and model.id<>?";
		return WorkingPaperDao.findforCount(sql,new Object[]{value,id});
	}
	/**
	 * 分页查询任免数据
	 * @param queryStr
	 * @param queryDept
	 * @param currPage
	 * @param pageSize
	 * @return
	 * @throws Exception 
	 */
	public Page<WorkingPaper> findAADByPage(String queryStr,int currPage,int pageSize) throws Exception{
		String sql = "from  WorkingPaper as wp   ";//查询对象
		String where = " (wp.delFlag is null or wp.delFlag=1) ";//查询条件
		Object[] args = null;
		if(StringUtils.isNotBlank(queryStr)){
			where += " and ( wp.postingNumber like '%"+queryStr+"%' or wp.postingName like '%"+queryStr+"%'or wp.workingType like '%"+queryStr+"%') ";
		}
		sql = sql + " where "+where + "order by wp.id asc";
		Page<WorkingPaper> page = new Page<WorkingPaper>();
		//List<WorkingPaper> WorkingPaperResult = WorkingPaperDao.findForPage(sql+" order by wp.id desc",args, currPage, pageSize);
		List<WorkingPaper> result = WorkingPaperDao.findForPage(sql+" order by wp.id desc",args, currPage, pageSize);
		int totalSize = WorkingPaperDao.findforCount("select count(*) "+sql,args);
		
		/*
		 * 需要补充
		*/
		
		page.setResult(result);
		page.setCurrPage(currPage);
		page.setPageSize(pageSize);
		page.setTotalSize(totalSize);
		return page;	
	}
	/**
	 * 添加任免信息
	 */
	public void save(WorkingPaper workingpaper, PostUser postuser){
		WorkingPaperDao.save(workingpaper);
		String hql = " from WorkingPaper as wp where wp.postingNumber = ?";
		List<WorkingPaper> wp = WorkingPaperDao.queryList(hql, new Object[]{workingpaper.getPostingNumber()});
		
		WorkingPaper t= wp.get(wp.size()-1);
		/*
		 * for(int i = 0; i < postuser.size(); i++){
		 * PostUser pu = postuser.get(i);
		 * pu.setWorkingPaper(t);
		 * }
		*/
		postuser.setWorkingPaper(t);
		PostUserDao.save(postuser);
		
	}
	
	public void addWorkingPaper(WorkingPaper workingpaper){
		if (null == workingpaper) return;
		WorkingPaperDao.save(workingpaper);
	}
	
	public void savePostUser(PostUser postUser){
		if (null == postUser) return;
		PostUserDao.save(postUser);
	}
	
	
	@Transactional
	public void delete(Integer id){
		String hql = " from PostUser pu where pu.workingPaper.id = ?";
		List<PostUser> postusers = PostUserDao.queryList(hql, new Object[]{id});
		List<PositionPostuser> positionPostusers = new ArrayList<PositionPostuser>();
		PostHistory postHistory;
		for(int i = 0; i < postusers.size(); i++){
			hql = "from PositionPostuser where postUser = ? and position = ? ";
			positionPostusers = positionPostUserDao.queryList(hql, new Object[]{postusers.get(i),postusers.get(i).getPosition()});
			for (PositionPostuser positionPostuser : positionPostusers) {
				positionPostUserDao.delete(positionPostuser);
			}
			
			postHistory = postHistoryService.findByPositionAndUser(postusers.get(0).getPosition(), postusers.get(0).getUser());
			if (null != postHistory) {
				postHistoryDao.delete(postHistory);
			}
			
			int tid = postusers.get(i).getId();
			PostUserDao.delete(PostUser.class, tid);
		}
		
		String hql2 = "from AdministrationWorkHistory awh where awh.paper.id = ?";
		List<AdministrationWorkHistory> administrationWorkHistories = administrationWorkDao.queryList(hql2, new Object[]{id});
		for (AdministrationWorkHistory administrationWorkHistory: administrationWorkHistories) {
			administrationWorkDao.delete(administrationWorkHistory);
		}
		
		String hql3 = "from AdministrationLevelHistory awh where awh.paper.id = ?";
		List<AdministrationLevelHistory> administrationLevelHistories = adminstrationLevelDao.queryList(hql3, new Object[]{id});
		for (AdministrationLevelHistory administrationLevelHistory: administrationLevelHistories) {
			adminstrationLevelDao.delete(administrationLevelHistory);
		}
		
		WorkingPaperDao.delete(WorkingPaper.class, id);
	}
	/**
	 * 修改对象
	 * @param fm
	 */
	public void update(PostUser postUser){
		
		PostUserDao.update(postUser);
	}
	/**
	 * 根据hql分页查找
	 * @param hql
	 * @param currPage
	 * @param pageSize
	 * @return
	 * @throws Exception
	 */
	public Page<WorkingPaper> findSearchAadByPage(String postingNumber,String postingName,String postingDayOperator,Date postingDay,String workingType,int currPage,int pageSize) throws Exception{
		String hql="from WorkingPaper where (delFlag is null or delFlag = 1)";
		if (StringUtil.isNotBlank(postingNumber)){
			 hql+=" and postingNumber ='"+postingNumber+"'";
		}
		
		if (StringUtil.isNotBlank(postingName)){
			hql+=" and postingName ='"+postingName+"'";
		}
		if (postingDay!=null){
			
			hql += " and (postingDay "+this.convertOperator(postingDayOperator)+"'"+DateFormat.getDateInstance().format(postingDay)+"' or postingDay is null)";
		}
		if (StringUtil.isNotBlank(workingType)){
			hql+=" and workingType ='"+workingType+"'";		}
		hql += " order by id desc";
		Page<WorkingPaper> page = new Page<WorkingPaper>();
		Object[] args=null;
		List<WorkingPaper> result =  WorkingPaperDao.findForPage(hql, args, currPage, pageSize);
		int totalSize = WorkingPaperDao.findforCount("select count(*) "+hql, args);
		
		page.setResult(result);
		page.setPageSize(pageSize);
		page.setCurrPage(currPage);
		page.setTotalSize(totalSize);
		return page;
	}
	/*
	 * 操作符转换
	 */
	private String convertOperator(String op){
		if (op.equals("R"))
			return ">";
		else if (op.equals("E"))
			return "=";
		else
			return "<";
	}
	public Integer getPostUserByPosition(Position position) {
		// TODO Auto-generated method stub
		String hql = "from PostUser where position = ?";
		List<PostUser> postUsers = PostUserDao.queryList(hql, new Object[]{position});
		if (null == postUsers) return 0;
		else {
			return postUsers.size();
		}
	}
}
